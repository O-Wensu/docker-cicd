# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  CICD:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        gradle-version: 7.5.1
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    ## create YML
    - name : Create application-secret.yml File
      run : |
        echo "${{secrets.APPLICATION_SECRET_YML}}" > src/main/resources/application-secret.yml
        find src

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
  
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    ## image Build and Push
    - name: Docker build & push to prod
      run: |
        docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
        docker build -f Dockerfile -t "${{ secrets.DOCKER_REPO }}":latest .
        docker push "${{ secrets.DOCKER_REPO }}":latest
        
    ## Deploy 
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
              sudo docker rm -f $(sudo docker ps -qa) # Remove all running containers
              sudo docker pull ${{ secrets.DOCKER_REPO }}:latest 
              sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
